[
    {
        "id": "1",
        "slug": "introduccion-swiftui",

        "title": "Introducción a SwiftUI: Construyendo Interfaces Declarativas con Swift",
        "description": "Descubre los fundamentos de SwiftUI y cómo crear interfaces de usuario modernas y reactivas para aplicaciones iOS.",
        "content": "# Introducción a SwiftUI\n\n![Portada SwiftUI](/images/posts/swiftui-intro.jpg)\n\nSwiftUI es un framework moderno de Apple para construir interfaces de usuario de forma declarativa. En este tutorial, aprenderás los conceptos básicos y crearás tu primera aplicación con SwiftUI.\n\n## ¿Qué es SwiftUI?\n\nSwiftUI es un framework revolucionario que permite a los desarrolladores crear interfaces de usuario con un código más conciso y legible, utilizando Swift y un enfoque declarativo. Esto significa que expresas lo que quieres que haga tu interfaz, no cómo quieres que lo haga.\n\n## Ventajas de usar SwiftUI\n\n- **Código más limpio y legible**\n- **Actualizaciones automáticas del UI con cambios en el estado**\n- **Diseño responsivo por defecto**\n- **Vista previa en tiempo real dentro de Xcode**\n\n## Primeros pasos: Tu primera vista en SwiftUI\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"¡Hola, SwiftUI!\")\n            .font(.title)\n            .padding()\n    }\n}\n```\n\nEsta pequeña vista ya representa una interfaz funcional que muestra un texto con estilo.\n\n## Estructura de una Vista\n\n![Detalle Vista](/images/posts/swiftui-intro-detail1.jpg)\n\nEn SwiftUI, todo es una vista. Puedes componer vistas más complejas a partir de vistas más simples:\n\n```swift\nVStack {\n    Text(\"Bienvenido a SwiftUI\")\n        .font(.headline)\n    Image(systemName: \"star.fill\")\n        .foregroundColor(.yellow)\n}\n```\n\n## Bindings y State\n\nSwiftUI se basa en un sistema de bindings reactivo. Puedes declarar estados y ligarlos directamente a la interfaz:\n\n```swift\n@State private var contador = 0\n\nvar body: some View {\n    Button(\"Contador: \\(contador)\") {\n        contador += 1\n    }\n}\n```\n\n## Preview y Live Updates\n\nXcode permite previsualizar tus vistas mientras las escribes:\n\n```swift\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n![Live Preview](/images/posts/swiftui-intro-detail2.jpg)\n\n## Conclusión\n\nSwiftUI simplifica el desarrollo de interfaces modernas y dinámicas. Con una curva de aprendizaje progresiva y herramientas potentes, es ideal tanto para principiantes como para desarrolladores experimentados.\n\n---\n\n¿Te gustaría aprender más sobre SwiftUI? Mira nuestros tutoriales relacionados como [Arquitectura MVVM en SwiftUI](./arquitectura-mvvm-swiftui) o [Swift Concurrency con async/await](./swift-concurrency).\n",

        "createdAt": "2024-04-01T00:00:00Z",
        "updatedAt": "2024-04-10T00:00:00Z",
        "publishedAt": "2024-04-01T00:00:00Z",
        "isPublished": true,

        "category": "SwiftUI",
        "tags": ["SwiftUI", "iOS", "UI Framework", "Apple"],
        "level": "Principiante",
        "type": "tutorial",

        "imageUrl": "/images/posts/swiftui-intro.jpg",
        "images": ["/images/posts/swiftui-intro-detail1.jpg", "/images/posts/swiftui-intro-detail2.jpg"],
        "coverImage": "/images/posts/swiftui-intro.jpg",

        "readTime": 10,
        "wordCount": 2500,

        "author": {
            "id": "author-1",
            "name": "Alvaro Guerra",
            "username": "alvaro-guerra",
            "avatar": "/images/authors/alvaro.jpg",
            "bio": "Desarrollador iOS con 5 años de experiencia especializado en SwiftUI y arquitecturas modernas de desarrollo móvil.",
            "socialLinks": {
                "twitter": "https://twitter.com/alvaroguerra",
                "github": "https://github.com/alvaroguerra",
                "linkedin": "https://linkedin.com/in/alvaroguerra"
            }
        },

        "keywords": ["SwiftUI", "iOS", "desarrollo de aplicaciones", "interfaces de usuario", "Apple"],
        "metaDescription": "Descubre los fundamentos de SwiftUI y cómo crear interfaces de usuario modernas y reactivas para aplicaciones iOS.",

        "relatedPosts": [
            {
                "id": "2",
                "title": "Swift Concurrency: async/await",
                "slug": "swift-concurrency",
                "imageUrl": "/images/posts/swiftui-intro.jpg",
                "category": "Swift",
                "description": "Domina el nuevo modelo de concurrencia de Swift con async/await y actores para crear aplicaciones más rápidas y seguras."
            },
            {
                "id": "3",
                "title": "Arquitectura MVVM en SwiftUI",
                "slug": "arquitectura-mvvm-swiftui",
                "imageUrl": "/images/posts/swiftui-intro.jpg",
                "category": "Arquitectura",
                "description": "Aprende a implementar el patrón Model-View-ViewModel en tus aplicaciones SwiftUI para un código más mantenible y testeable."
            }
        ],

        "views": 1250,
        "likedBy": ["user-1", "user-2", "user-3"],	
        
        "draft": false,
        "featured": true,
        "language": "es"
    },
    {
        "id": "2",
        "title": "Swift Concurrency: Revolucionando el código asíncrono con async/await",
        "description": "Domina el nuevo modelo de concurrencia de Swift con async/await y actores para crear aplicaciones más rápidas y seguras.",
        "content": "# Swift Concurrency: La revolución async/await\n\nEn Swift 5.5, Apple introdujo un nuevo modelo de concurrencia que transforma la forma en que manejamos el código asíncrono. Este artículo profundiza en async/await, actores y cómo estos conceptos nos ayudan a escribir código más limpio y seguro.\n\n## El problema de la concurrencia tradicional\n\nAntes de Swift 5.5, la programación asíncrona se basaba principalmente en closures y completion handlers, lo que a menudo resultaba en código difícil de leer y mantener, conocido como \"callback hell\".",
        "category": "Swift",
        "level": "Intermedio",
        "type": "article",
        "slug": "swift-concurrency",
        "metaDescription": "Domina el nuevo modelo de concurrencia de Swift con async/await y actores para aplicaciones más seguras y eficientes.",
        "imageUrl": "/images/posts/swiftui-intro.jpg",
        "images": ["/images/posts/swift-concurrency-detail1.jpg", "/images/posts/swift-concurrency-detail2.jpg"],
        "coverImage": "/images/posts/swift-concurrency-cover.jpg",
        "tags": ["Swift 5.5", "Concurrency", "async/await", "actors", "iOS"],
        "isPublished": true,
        "readTime": 12,
        "wordCount": 3200,
        "createdAt": "2024-03-15T00:00:00Z",
        "updatedAt": "2024-04-05T00:00:00Z",
        "publishedAt": "2024-03-20T00:00:00Z",
        "views": 980,
        "likedBy": ["user-1", "user-2", "user-3"],	
        "draft": false,
        "featured": false,
        "language": "es",
        "keywords": ["Swift concurrency", "async/await", "actores", "programación asíncrona", "desarrollo iOS"],
        "author": {
            "id": "author-1",
            "name": "Alvaro Guerra",
            "username": "alvaro-guerra",
            "avatar": "/images/authors/alvaro.jpg",
            "bio": "Desarrollador iOS con 5 años de experiencia especializado en SwiftUI y arquitecturas modernas de desarrollo móvil.",
            "socialLinks": {
                "twitter": "https://twitter.com/alvaroguerra",
                "github": "https://github.com/alvaroguerra",
                "linkedin": "https://linkedin.com/in/alvaroguerra"
            }
        },
        "relatedPosts": [
            {
                "id": "1",
                "title": "Introducción a SwiftUI: Construyendo Interfaces Declarativas con Swift",
                "slug": "introduccion-swiftui"
            },
            {
                "id": "4",
                "title": "Optimización de rendimiento en aplicaciones iOS",
                "slug": "optimizacion-rendimiento-ios"
            }
        ]
    },
    {
        "id": "3",
        "title": "Arquitectura MVVM en SwiftUI",
        "description": "Aprende a implementar el patrón Model-View-ViewModel en tus aplicaciones SwiftUI para un código más mantenible y testeable.",
        "content": "# Arquitectura MVVM en SwiftUI\n\nEn este tutorial, exploraremos cómo implementar el patrón de arquitectura MVVM (Model-View-ViewModel) en aplicaciones SwiftUI. MVVM es particularmente adecuado para SwiftUI debido a su sistema de binding reactivo y su enfoque declarativo.\n\n## ¿Qué es MVVM?\n\nMVVM separa tus aplicaciones en tres componentes principales: Model (los datos), View (la interfaz de usuario) y ViewModel (la lógica que conecta Model y View).",
        "category": "Arquitectura",
        "level": "Intermedio",
        "type": "article",
        "slug": "arquitectura-mvvm-swiftui",
        "metaDescription": "Aprende a implementar MVVM en SwiftUI para crear aplicaciones más mantenibles, testables y escalables.",
        "imageUrl": "/images/posts/swiftui-intro.jpg",
        "images": ["/images/posts/mvvm-swiftui-detail1.jpg", "/images/posts/mvvm-swiftui-detail2.jpg"],
        "coverImage": "/images/posts/swiftui-intro.jpg",
        "tags": ["SwiftUI", "MVVM", "Arquitectura", "Patrones de Diseño", "iOS"],
        "isPublished": true,
        "readTime": 15,
        "wordCount": 3800,
        "createdAt": "2024-02-20T00:00:00Z",
        "updatedAt": "2024-03-15T00:00:00Z",
        "publishedAt": "2024-02-25T00:00:00Z",
        "views": 1580,
        "likedBy": ["user-1", "user-2", "user-3"],	
        "draft": false,
        "featured": false,
        "language": "es",
        "keywords": ["MVVM", "SwiftUI", "arquitectura", "patrones de diseño", "desarrollo iOS"],
        "author": {
            "id": "author-2",
            "name": "María López",
            "username": "maria-lopez",
            "avatar": "/images/authors/maria.jpg",
            "bio": "Ingeniera de software especializada en arquitecturas limpias y patrones de diseño para desarrollo iOS.",
            "socialLinks": {
                "twitter": "https://twitter.com/marialopez",
                "github": "https://github.com/marialopez",
                "linkedin": "https://linkedin.com/in/marialopez"
            }
        },
        "relatedPosts": [
            {
                "id": "1",
                "title": "Introducción a SwiftUI: Construyendo Interfaces Declarativas con Swift",
                "slug": "introduccion-swiftui"
            },
            {
                "id": "5",
                "title": "Inyección de dependencias en SwiftUI",
                "slug": "inyeccion-dependencias-swiftui"
            }
        ]
    },
    {
        "id": "4",
        "title": "Arquitectura MVVM en SwiftUI",
        "description": "Aprende a implementar el patrón Model-View-ViewModel en tus aplicaciones SwiftUI para un código más mantenible y testeable.",
        "content": "# Arquitectura MVVM en SwiftUI\n\nEn este tutorial, exploraremos cómo implementar el patrón de arquitectura MVVM (Model-View-ViewModel) en aplicaciones SwiftUI. MVVM es particularmente adecuado para SwiftUI debido a su sistema de binding reactivo y su enfoque declarativo.\n\n## ¿Qué es MVVM?\n\nMVVM separa tus aplicaciones en tres componentes principales: Model (los datos), View (la interfaz de usuario) y ViewModel (la lógica que conecta Model y View).",
        "category": "Arquitectura",
        "level": "Intermedio",
        "type": "article",
        "slug": "arquitectura-mvvm-swiftui",
        "metaDescription": "Aprende a implementar MVVM en SwiftUI para crear aplicaciones más mantenibles, testables y escalables.",
        "imageUrl": "/images/posts/swiftui-intro.jpg",
        "images": ["/images/posts/mvvm-swiftui-detail1.jpg", "/images/posts/mvvm-swiftui-detail2.jpg"],
        "coverImage": "/images/posts/swiftui-intro.jpg",
        "tags": ["SwiftUI", "MVVM", "Arquitectura", "Patrones de Diseño", "iOS"],
        "isPublished": true,
        "readTime": 15,
        "wordCount": 3800,
        "createdAt": "2024-02-20T00:00:00Z",
        "updatedAt": "2024-03-15T00:00:00Z",
        "publishedAt": "2024-02-25T00:00:00Z",
        "views": 1580,
        "likedBy": ["user-1", "user-2", "user-3"],	
        "draft": false,
        "featured": false,
        "language": "es",
        "keywords": ["MVVM", "SwiftUI", "arquitectura", "patrones de diseño", "desarrollo iOS"],
        "author": {
            "id": "author-2",
            "name": "María López",
            "username": "maria-lopez",
            "avatar": "/images/authors/maria.jpg",
            "bio": "Ingeniera de software especializada en arquitecturas limpias y patrones de diseño para desarrollo iOS.",
            "socialLinks": {
                "twitter": "https://twitter.com/marialopez",
                "github": "https://github.com/marialopez",
                "linkedin": "https://linkedin.com/in/marialopez"
            }
        },
        "relatedPosts": [
            {
                "id": "1",
                "title": "Introducción a SwiftUI: Construyendo Interfaces Declarativas con Swift",
                "slug": "introduccion-swiftui"
            },
            {
                "id": "5",
                "title": "Inyección de dependencias en SwiftUI",
                "slug": "inyeccion-dependencias-swiftui"
            }
        ]
    },
    {
        "id": "5",
        "title": "Arquitectura MVVM en SwiftUI",
        "description": "Aprende a implementar el patrón Model-View-ViewModel en tus aplicaciones SwiftUI para un código más mantenible y testeable.",
        "content": "# Arquitectura MVVM en SwiftUI\n\nEn este tutorial, exploraremos cómo implementar el patrón de arquitectura MVVM (Model-View-ViewModel) en aplicaciones SwiftUI. MVVM es particularmente adecuado para SwiftUI debido a su sistema de binding reactivo y su enfoque declarativo.\n\n## ¿Qué es MVVM?\n\nMVVM separa tus aplicaciones en tres componentes principales: Model (los datos), View (la interfaz de usuario) y ViewModel (la lógica que conecta Model y View).",
        "category": "Arquitectura",
        "level": "Intermedio",
        "type": "article",
        "slug": "arquitectura-mvvm-swiftui",
        "metaDescription": "Aprende a implementar MVVM en SwiftUI para crear aplicaciones más mantenibles, testables y escalables.",
        "imageUrl": "/images/posts/swiftui-intro.jpg",
        "images": ["/images/posts/mvvm-swiftui-detail1.jpg", "/images/posts/mvvm-swiftui-detail2.jpg"],
        "coverImage": "/images/posts/swiftui-intro.jpg",
        "tags": ["SwiftUI", "MVVM", "Arquitectura", "Patrones de Diseño", "iOS"],
        "isPublished": true,
        "readTime": 15,
        "wordCount": 3800,
        "createdAt": "2024-02-20T00:00:00Z",
        "updatedAt": "2024-03-15T00:00:00Z",
        "publishedAt": "2024-02-25T00:00:00Z",
        "views": 1580,
        "likedBy": ["user-1", "user-2", "user-3"],	
        "draft": false,
        "featured": false,
        "language": "es",
        "keywords": ["MVVM", "SwiftUI", "arquitectura", "patrones de diseño", "desarrollo iOS"],
        "author": {
            "id": "author-2",
            "name": "María López",
            "username": "maria-lopez",
            "avatar": "/images/authors/maria.jpg",
            "bio": "Ingeniera de software especializada en arquitecturas limpias y patrones de diseño para desarrollo iOS.",
            "socialLinks": {
                "twitter": "https://twitter.com/marialopez",
                "github": "https://github.com/marialopez",
                "linkedin": "https://linkedin.com/in/marialopez"
            }
        },
        "relatedPosts": [
            {
                "id": "1",
                "title": "Introducción a SwiftUI: Construyendo Interfaces Declarativas con Swift",
                "slug": "introduccion-swiftui"
            },
            {
                "id": "5",
                "title": "Inyección de dependencias en SwiftUI",
                "slug": "inyeccion-dependencias-swiftui"
            }
        ]
    }
]
