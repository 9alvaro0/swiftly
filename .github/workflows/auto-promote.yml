name: Auto-promote GitFlow

on:
  push:
    branches: [develop, release]

permissions:
  contents: read
  pull-requests: write
  actions: read
  repository-projects: read

jobs:
  auto-promote:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-create PR from develop to release
        if: github.ref == 'refs/heads/develop'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR already exists
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'develop',
              base: 'release',
              state: 'open'
            });

            if (existingPRs.length === 0) {
              // Create PR from develop to release
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'promote: merge develop to release for PRE deployment',
                body: '## Summary\nAutomatic promotion from develop to release branch for PRE environment deployment.\n\n## Changes\nThis PR contains the latest stable changes from develop branch.\n\n## Deployment\nWill trigger automatic deployment to:\n- **PRE environment**: https://aprende-swift-pre--swiftly-by-warwere.web.app\n\n## Quality Assurance\n- ‚úÖ All CI checks passed on develop\n- ‚úÖ All required status checks must pass before merge\n\nü§ñ Auto-generated by GitFlow workflow',
                head: 'develop',
                base: 'release'
              });
              
              console.log('‚úÖ Created PR from develop to release');
            } else {
              console.log('‚ÑπÔ∏è PR from develop to release already exists');
            }

      - name: Auto-create PR from release to master
        if: github.ref == 'refs/heads/release'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR already exists
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'release',
              base: 'master',
              state: 'open'
            });

            if (existingPRs.length === 0) {
              // Get the latest tag to suggest next version
              let suggestedVersion = 'v1.0.0';
              try {
                const { data: tags } = await github.rest.repos.listTags({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 1
                });
                
                if (tags.length > 0) {
                  const latestTag = tags[0].name;
                  const versionMatch = latestTag.match(/v(\d+)\.(\d+)\.(\d+)/);
                  if (versionMatch) {
                    const [, major, minor, patch] = versionMatch;
                    suggestedVersion = `v${major}.${minor}.${parseInt(patch) + 1}`;
                  }
                }
              } catch (error) {
                console.log('Could not fetch tags, using default version');
              }

              // Create PR from release to master
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `release: deploy to production ${suggestedVersion}`,
                body: `## Summary\nDeploy latest stable release to production environment.\n\n## Deployment\nWill trigger automatic deployment to:\n- **PRODUCTION**: https://aprendeswift.dev\n\n## Suggested Version\n${suggestedVersion} (evaluate if changes warrant new version)\n\n## Quality Assurance\n- ‚úÖ All CI checks passed on release\n- ‚úÖ All required status checks must pass before merge\n- ‚úÖ Tested on PRE environment\n\n## Post-merge Actions\n- [ ] Create tag ${suggestedVersion} if changes warrant new version\n- [ ] Monitor production deployment\n- [ ] Verify core functionality\n\nü§ñ Auto-generated by GitFlow workflow`,
                head: 'release',
                base: 'master'
              });
              
              console.log('‚úÖ Created PR from release to master');
            } else {
              console.log('‚ÑπÔ∏è PR from release to master already exists');
            }