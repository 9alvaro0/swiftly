rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // HELPER FUNCTIONS - Mejores prácticas 2024
    // ========================================
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAnonymous() {
      return isAuthenticated() && 
             request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    // Role-based access control (RBAC)
    function getUserRole() {
      return isAuthenticated() ? 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    function hasRole(role) {
      return getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return getUserRole() in roles;
    }
    
    function isAdmin() {
      return hasRole('admin') || 
             (isAuthenticated() && request.auth.token.email == '9alvaro0@gmail.com');
    }
    
    function isEditor() {
      return hasAnyRole(['admin', 'editor']);
    }
    
    function isAuthor() {
      return hasAnyRole(['admin', 'editor', 'author']);
    }
    
    // Data validation helpers
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             email.size() > 5 &&
             email.size() < 255;
    }
    
    function isValidString(field, minSize, maxSize) {
      return field is string && 
             field.size() >= minSize && 
             field.size() <= maxSize;
    }
    
    function hasValidRole(role) {
      return role in ['admin', 'editor', 'author', 'user'];
    }
    
    // Request data helpers
    function incomingData() {
      return request.resource.data;
    }
    
    function existingData() {
      return resource.data;
    }
    
    function hasFields(fields) {
      return incomingData().keys().hasAll(fields);
    }
    
    // Time-based helpers
    function isWithinMinutes(timeValue, minutes) {
      return request.time < timeValue + duration.value(minutes, 'm');
    }
    
    // ========================================
    // USERS COLLECTION - Base para RBAC
    // ========================================
    match /users/{userId} {
      // Lectura: propietario o admin
      allow read: if isOwner(userId) || isAdmin();
      
      // Lista: solo admins
      allow list: if isAdmin();
      
      // Creación: durante registro con validación corregida
      allow create: if isOwner(userId) &&
                       incomingData().uid == userId &&
                       isValidEmail(incomingData().email) &&
                       incomingData().role == 'user' && // Nuevos usuarios siempre empiezan como 'user'
                       incomingData().isActive == true &&
                       incomingData().isBanned == false;
      
      // Actualización: propietario (campos limitados) o admin
      allow update: if isAdmin() ||
                       (isOwner(userId) &&
                        // Los usuarios no pueden cambiar estos campos críticos
                        incomingData().uid == existingData().uid &&
                        incomingData().email == existingData().email &&
                        incomingData().role == existingData().role &&
                        incomingData().isActive == existingData().isActive &&
                        incomingData().isBanned == existingData().isBanned);
      
      // Eliminación: solo admins
      allow delete: if isAdmin();
    }
    
    // ========================================
    // AUTHORS COLLECTION - Perfiles públicos
    // ========================================
    match /authors/{authorId} {
      // Lectura: público para mostrar en posts
      allow read: if true;
      allow list: if true;
      
      // Escritura: propietario o admin
      allow create, update: if isOwner(authorId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // ========================================
    // POSTS COLLECTION - Contenido principal
    // ========================================
    match /posts/{postId} {
      // Funciones específicas para posts
      function isPostAuthor() {
        return isAuthenticated() && 
               request.auth.uid == existingData().authorId;
      }
      
      function isValidPost() {
        let data = incomingData();
        return hasFields(['title', 'content', 'authorId', 'tags', 'isPublished']) &&
               isValidString(data.title, 3, 200) &&
               isValidString(data.content, 10, 100000) &&
               data.tags is list &&
               data.tags.size() <= 10 &&
               data.isPublished is bool;
      }
      
      function canPublish() {
        return isAuthor() || isEditor() || isAdmin();
      }
      
      // Lectura: acceso público para lectura de posts
      allow read: if true;
      
      // Lista: acceso público para queries y listas
      allow list: if true;
      
      // Creación: usuarios autenticados pueden crear con validación básica
      allow create: if isAuthenticated() &&
                       request.auth.uid == incomingData().authorId &&
                       incomingData().authorId is string &&
                       incomingData().title is string &&
                       incomingData().content is string &&
                       incomingData().isPublished is bool;
      
      // Actualización: autor del post o admin
      allow update: if isAuthenticated() &&
                       (request.auth.uid == resource.data.authorId || 
                        request.auth.token.email == '9alvaro0@gmail.com') &&
                       incomingData().authorId == resource.data.authorId; // No cambiar autor
      
      // Eliminación: admin o autor del post
      allow delete: if isAuthenticated() &&
                       (request.auth.uid == resource.data.authorId || 
                        request.auth.token.email == '9alvaro0@gmail.com');
    }
    
    // ========================================
    // COMMENTS COLLECTION - Interacción usuarios
    // ========================================
    match /comments/{commentId} {
      function isValidComment() {
        let data = incomingData();
        return hasFields(['content', 'authorId', 'postId', 'createdAt']) &&
               isValidString(data.content, 1, 1000) &&
               data.authorId == request.auth.uid &&
               exists(/databases/$(database)/documents/posts/$(data.postId));
      }
      
      function isCommentAuthor() {
        return isAuthenticated() && 
               request.auth.uid == existingData().authorId;
      }
      
      // Rate limiting: 1 comentario por minuto
      function notRateLimited() {
        return !exists(/databases/$(database)/documents/comments/$(request.auth.uid + '_' + incomingData().postId + '_recent')) ||
               !isWithinMinutes(get(/databases/$(database)/documents/comments/$(request.auth.uid + '_' + incomingData().postId + '_recent')).data.createdAt, 1);
      }
      
      // Lectura: público
      allow read: if true;
      allow list: if true;
      
      // Creación: usuarios autenticados con validación y rate limiting
      allow create: if isAuthenticated() && 
                       !isAnonymous() && // No comentarios anónimos
                       isValidComment() &&
                       notRateLimited();
      
      // Actualización: autor del comentario (primeros 10 minutos) o admin
      allow update: if isAdmin() ||
                       (isCommentAuthor() && 
                        isWithinMinutes(existingData().createdAt, 10) &&
                        incomingData().authorId == existingData().authorId &&
                        incomingData().postId == existingData().postId);
      
      // Eliminación: autor o admin
      allow delete: if isCommentAuthor() || isAdmin();
    }
    
    // ========================================
    // TAGS COLLECTION - Taxonomía
    // ========================================
    match /tags/{tagId} {
      function isValidTag() {
        let data = incomingData();
        return hasFields(['name', 'slug']) &&
               isValidString(data.name, 2, 50) &&
               isValidString(data.slug, 2, 50) &&
               data.slug.matches('^[a-z0-9-]+$');
      }
      
      // Lectura: público
      allow read: if true;
      allow list: if true;
      
      // Escritura: solo editores y admins con validación
      allow create, update: if isEditor() && isValidTag();
      allow delete: if isAdmin(); // Solo admin puede eliminar
    }
    
    // ========================================
    // NEWSLETTER COLLECTION - Suscripciones
    // ========================================
    match /newsletter/{subscriberId} {
      function isValidSubscription() {
        let data = incomingData();
        return hasFields(['email', 'createdAt']) &&
               isValidEmail(data.email) &&
               data.createdAt == request.time;
      }
      
      // Lectura: solo admins
      allow read, list: if isAdmin();
      
      // Creación: público con validación (una por email)
      allow create: if isValidSubscription() &&
                       !exists(/databases/$(database)/documents/newsletter/$(incomingData().email.lower()));
      
      // Actualización/Eliminación: solo admins
      allow update, delete: if isAdmin();
    }
    
    // Legacy collection - migrar a newsletter
    match /newsletterSubscribers/{subscriberId} {
      function isValidSubscription() {
        let data = incomingData();
        return hasFields(['email', 'subscribedAt']) &&
               isValidEmail(data.email);
      }
      
      function isValidSubscriptionCreate() {
        let data = incomingData();
        return hasFields(['email', 'createdAt', 'isActive']) &&
               isValidEmail(data.email) &&
               data.isActive is bool;
      }
      
      // Lectura: admins pueden leer todo, usuarios pueden leer su propia suscripción
      allow read: if isAdmin() ||
                     (isAuthenticated() && 
                      request.auth.token.email != null &&
                      resource.data.email == request.auth.token.email.lower());
      
      // Lista: admins pueden listar todos, usuarios autenticados pueden hacer queries
      // Nota: Firebase requiere allow list para que funcionen las queries
      allow list: if isAdmin() || isAuthenticated();
      
      // Creación: público con validación
      allow create: if isValidSubscriptionCreate();
      
      // Actualización: admins o usuarios actualizando su propia suscripción
      allow update: if isAdmin() || 
                       (isAuthenticated() && 
                        request.auth.token.email != null &&
                        resource.data.email == request.auth.token.email.lower() &&
                        // Solo permitir cambiar isActive
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.keys().hasAll(['isActive']));
      
      // Eliminación: solo admins
      allow delete: if isAdmin();
    }
    
    // ========================================
    // CONTACTS COLLECTION - Formulario contacto
    // ========================================
    match /contacts/{contactId} {
      function isValidContact() {
        let data = incomingData();
        return hasFields(['name', 'email', 'message', 'createdAt']) &&
               isValidString(data.name, 2, 100) &&
               isValidEmail(data.email) &&
               isValidString(data.message, 10, 2000) &&
               data.createdAt == request.time;
      }
      
      // Rate limiting: 1 mensaje cada 5 minutos por IP/email
      function notSpamming() {
        return true; // Implementar rate limiting por IP si es necesario
      }
      
      // Lectura: solo admins
      allow read, list: if isAdmin();
      
      // Creación: público con validación
      allow create: if isValidContact() && notSpamming();
      
      // Actualización/Eliminación: solo admins
      allow update, delete: if isAdmin();
    }
    
    // ========================================
    // ANALYTICS COLLECTION - Solo lectura admin
    // ========================================
    match /analytics/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // ========================================
    // CONFIG COLLECTION - Configuración sistema
    // ========================================
    match /config/{configId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // ========================================
    // REGLA DEFAULT - Denegar todo lo demás
    // ========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}